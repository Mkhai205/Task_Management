import { Groups, GroupMembers, Users } from "../models/indexModels.js";
import { sendResponse } from "../utils/responseHelper.js";

/**
 * üÜï T·∫°o nh√≥m m·ªõi
 */
const createGroup = async (req, res) => {
    try {
        const { name, description } = req.body;
        const userId = req.user.id; // L·∫•y ID c·ªßa ng∆∞·ªùi t·∫°o nh√≥m

        // T·∫°o nh√≥m m·ªõi
        const group = await Groups.create({
            name: name,
            description: description,
            created_by: userId,
        });

        // Th√™m ng∆∞·ªùi t·∫°o v√†o nh√≥m v·ªõi quy·ªÅn Admin
        await GroupMembers.create({
            group_id: group.id,
            user_id: userId,
            role: "admin",
        });

        return sendResponse(res, 201, true, "Group created successfully", group);
    } catch (error) {
        return sendResponse(res, 500, false, error.message);
    }
};

/**
 * üìú L·∫•y danh s√°ch nh√≥m m√† user tham gia
 */
const getAllGroupsOfUser = async (req, res) => {
    try {
        const userId = req.user.id;

        const groups = await Groups.findAll({
            include: {
                model: GroupMembers,
                where: { user_id: userId },
                attributes: ["role"],
            },
        });

        return sendResponse(res, 200, true, "Groups fetched successfully", groups);
    } catch (error) {
        return sendResponse(res, 500, false, error.message);
    }
};

/**
 * üîç L·∫•y th√¥ng tin nh√≥m theo ID
 */
const getGroupById = async (req, res) => {
    try {
        const { groupId } = req.params;
        const userId = req.user.id;

        // Ki·ªÉm tra user c√≥ trong nh√≥m kh√¥ng
        const member = await GroupMembers.findOne({
            where: { group_id: groupId, user_id: userId },
        });

        if (!member) {
            return sendResponse(res, 403, false, "You are not a member of this group");
        }

        const group = await Groups.findByPk(groupId);
        return sendResponse(res, 200, true, "Group details fetched successfully", group);
    } catch (error) {
        return sendResponse(res, 500, false, error.message);
    }
};

/**
 * ‚ûï Th√™m th√†nh vi√™n v√†o nh√≥m (Ch·ªâ admin)
 */
const addMember = async (req, res) => {
    try {
        const { groupId, userId } = req.body;
        const adminId = req.user.id;

        // Ki·ªÉm tra user c√≥ ph·∫£i admin nh√≥m kh√¥ng
        const admin = await GroupMembers.findOne({
            where: { group_id: groupId, user_id: adminId, role: "admin" },
        });

        if (!admin) {
            return sendResponse(res, 403, false, "Only admins can add members");
        }

        // Ki·ªÉm tra user ƒë√£ trong nh√≥m ch∆∞a
        const existingMember = await GroupMembers.findOne({
            where: { group_id: groupId, user_id: userId },
        });

        if (existingMember) {
            return sendResponse(res, 400, false, "User is already a member");
        }

        // Th√™m user v√†o nh√≥m v·ªõi vai tr√≤ "member"
        await GroupMembers.create({ group_id: groupId, user_id: userId, role: "member" });

        return sendResponse(res, 201, true, "User added successfully");
    } catch (error) {
        return sendResponse(res, 500, false, error.message);
    }
};

/**
 * ‚ùå X√≥a th√†nh vi√™n kh·ªèi nh√≥m (Ch·ªâ admin)
 */
const removeMember = async (req, res) => {
    try {
        const { groupId, userId } = req.body;
        const adminId = req.user.id;

        // Ki·ªÉm tra admin c√≥ quy·ªÅn kh√¥ng
        const admin = await GroupMembers.findOne({
            where: { group_id: groupId, user_id: adminId, role: "admin" },
        });

        if (!admin) {
            return sendResponse(res, 403, false, "Only admins can remove members");
        }

        // Kh√¥ng cho ph√©p admin x√≥a ch√≠nh m√¨nh
        if (userId === adminId) {
            return sendResponse(res, 400, false, "Admin cannot remove themselves");
        }

        // X√≥a th√†nh vi√™n kh·ªèi nh√≥m
        await GroupMembers.destroy({ where: { group_id: groupId, user_id: userId } });

        return sendResponse(res, 200, true, "User removed successfully");
    } catch (error) {
        return sendResponse(res, 500, false, error.message);
    }
};

/**
 * ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin nh√≥m (Ch·ªâ admin)
 */
const updateGroup = async (req, res) => {
    try {
        const { groupId } = req.params;
        const { name, description } = req.body;
        const adminId = req.user.id;

        // Ki·ªÉm tra quy·ªÅn admin
        const admin = await GroupMembers.findOne({
            where: { group_id: groupId, user_id: adminId, role: "admin" },
        });

        if (!admin) {
            return sendResponse(res, 403, false, "Only admins can update group info");
        }

        // C·∫≠p nh·∫≠t nh√≥m
        await Groups.update({ name, description }, { where: { id: groupId } });

        return sendResponse(res, 200, true, "Group updated successfully");
    } catch (error) {
        return sendResponse(res, 500, false, error.message);
    }
};

/**
 * üóëÔ∏è X√≥a nh√≥m (Ch·ªâ admin)
 */
const deleteGroup = async (req, res) => {
    try {
        const { groupId } = req.params;
        const adminId = req.user.id;

        // Ki·ªÉm tra quy·ªÅn admin
        const admin = await GroupMembers.findOne({
            where: { group_id: groupId, user_id: adminId, role: "admin" },
        });

        if (!admin) {
            return sendResponse(res, 403, false, "Only admins can delete the group");
        }

        // X√≥a nh√≥m v√† t·∫•t c·∫£ d·ªØ li·ªáu li√™n quan
        await Groups.destroy({ where: { id: groupId } });

        return sendResponse(res, 200, true, "Group deleted successfully");
    } catch (error) {
        return sendResponse(res, 500, false, error.message);
    }
};

/**
 * üë• L·∫•y danh s√°ch th√†nh vi√™n trong nh√≥m
 */
const getGroupMembers = async (req, res) => {
    try {
        const { groupId } = req.params;

        const members = await GroupMembers.findAll({
            where: { group_id: groupId },
            include: { model: Users, attributes: ["id", "username", "email"] },
        });

        return sendResponse(res, 200, true, "Group members fetched successfully", members);
    } catch (error) {
        return sendResponse(res, 500, false, error.message);
    }
};

/**
 * üö™ R·ªùi nh√≥m (Ch·ªâ member)
 */
const leaveGroup = async (req, res) => {
    try {
        const { groupId } = req.params;
        const userId = req.user.id;

        // Ki·ªÉm tra user c√≥ trong nh√≥m kh√¥ng
        const member = await GroupMembers.findOne({
            where: { group_id: groupId, user_id: userId },
        });

        if (!member) {
            return sendResponse(res, 403, false, "You are not in this group");
        }

        // Kh√¥ng cho ph√©p admin duy nh·∫•t r·ªùi nh√≥m
        const isAdmin = member.role === "admin";
        const adminCount = await GroupMembers.count({
            where: { group_id: groupId, role: "admin" },
        });

        if (isAdmin && adminCount === 1) {
            return sendResponse(
                res,
                400,
                false,
                "Admin cannot leave the group if they are the only admin"
            );
        }

        // R·ªùi nh√≥m
        await GroupMembers.destroy({ where: { group_id: groupId, user_id: userId } });

        return sendResponse(res, 200, true, "You have left the group");
    } catch (error) {
        return sendResponse(res, 500, false, error.message);
    }
};

export {
    createGroup,
    getAllGroupsOfUser,
    getGroupById,
    addMember,
    removeMember,
    updateGroup,
    deleteGroup,
    getGroupMembers,
    leaveGroup,
};
